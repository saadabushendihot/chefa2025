/* main.css - ملف التصميم الرئيسي الموحد والمحسن */

/* ------------------------------------ */
/* 1. نظام تصميم أساسي (Core Design System) */
/* ------------------------------------ */

/* تعريف متغيرات الألوان (Material Design inspired palette) */
:root {
  --primary-color: #4267B2; /* لون أزرق جذاب للعلامة التجارية (مثل Facebook Blue) */
  --primary-dark: #365899;
  --primary-light: #6a8bbf;

  --secondary-color: #1a73e8; /* لون ثانوي للأعمال، أقرب لأزرق جوجل */
  --secondary-dark: #0f62d1;
  --secondary-light: #5e9bff;

  --success-color: #28a745; /* أخضر للنجاح */
  --danger-color: #dc3545; /* أحمر للخطر/الأخطاء */
  --warning-color: #ffc107; /* أصفر للتحذير */
  --info-color: #17a2b8;   /* أزرق فاتح للمعلومات */

  --background-light: #f8fafc; /* خلفية فاتحة موحدة */
  --surface-light: #ffffff;    /* أسطح العناصر (البطاقات، النماذج) في الوضع الفاتح */
  --text-dark: #212529;      /* لون النص الأساسي الداكن */
  --text-muted: #6c757d;     /* لون النص الثانوي/الخافت */
  --border-color: #e0e4e8;   /* لون الحدود الفاتح */
  --shadow-light: rgba(0, 0, 0, 0.08); /* ظل خفيف جداً */
  --shadow-medium: rgba(0, 0, 0, 0.12); /* ظل متوسط */
  --shadow-strong: rgba(0, 0, 0, 0.18); /* ظل أقوى للعناصر البارزة */
  --overlay-color: rgba(0, 0, 0, 0.4); /* طبقة التراكب لغطاء القائمة الجانبية */
}

/* تعريف متغيرات الألوان للوضع الليلي (Dark Mode) */
.dark-mode {
  --primary-color: #89b4f5; /* Primary light for dark mode */
  --primary-dark: #669df6;
  --primary-light: #a6cbf9;

  --secondary-color: #81c995; /* Secondary light for dark mode */
  --secondary-dark: #62b378;
  --secondary-light: #a0e0ae;

  --success-color: #69f0ae;
  --danger-color: #ef9a9a;
  --warning-color: #ffd54f;
  --info-color: #4dd0e1;

  --background-light: #121212; /* خلفية داكنة جداً */
  --surface-light: #1e1e1e;    /* أسطح العناصر في الوضع الليلي */
  --text-dark: #e0e0e0;      /* لون النص الأساسي الفاتح */
  --text-muted: #aaaaaa;     /* لون النص الثانوي في الوضع الليلي */
  --border-color: #333333;   /* لون الحدود في الوضع الليلي */
  --shadow-light: rgba(0, 0, 0, 0.3);
  --shadow-medium: rgba(0, 0, 0, 0.5);
  --shadow-strong: rgba(0, 0, 0, 0.7);
  --overlay-color: rgba(0, 0, 0, 0.7);
}

/* ------------------------------------ */
/* 2. القواعد الأساسية (Base Styles) */
/* ------------------------------------ */

html {
  scroll-behavior: smooth;
  height: 100%; /* مهم لبعض التخطيطات لضبط ارتفاع الأقسام الداخلية */
  /* overflow: hidden; تم إزالته من هنا، فقط لـ chat-page في الـ media queries */
}

body {
  font-family: 'Tajawal', Arial, sans-serif;
  background-color: var(--background-light);
  color: var(--text-dark);
  direction: rtl;
  text-align: right;
  line-height: 1.6;
  font-size: 16px;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding-top: 64px; /* مسافة أعلى الجسم لتجنب التداخل مع الهيدر الثابت */
  box-sizing: border-box;
}

/* ضبط padding-top لجسم الصفحة عند تصغير الهيدر في الشاشات الصغيرة */
@media (max-width: 960px) {
  body {
    padding-top: 56px; /* ارتفاع الهيدر المصغر */
  }
}


h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  margin-bottom: 0.5em;
  color: var(--primary-dark);
  font-weight: 700;
}

p {
  margin-top: 0;
  margin-bottom: 1em;
}

a {
  color: var(--secondary-color);
  text-decoration: none;
  transition: color 0.2s ease;
}

a:hover {
  color: var(--secondary-dark);
  text-decoration: underline;
}

/* إعادة تعيين بسيطة للعناصر الشائعة لتوحيد المظهر */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* ------------------------------------ */
/* 3. المكونات المشتركة (Common Components) */
/* ------------------------------------ */

/* الأزرار (Buttons) - تصميم موحد */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 64px;
  padding: 10px 20px;
  border: none;
  border-radius: 8px; /* حواف أكثر استدارة */
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  background-color: var(--primary-color);
  color: var(--surface-light);
  box-shadow: 0 2px 5px var(--shadow-light);
  transition: all 0.2s ease;
  white-space: nowrap;
}

.btn:hover {
  background-color: var(--primary-dark);
  box-shadow: 0 4px 8px var(--shadow-medium);
  transform: translateY(-1px);
}

.btn:active {
  transform: translateY(0);
}

.btn:disabled {
  background-color: #bdbdbd;
  color: #888888;
  cursor: not-allowed;
  box-shadow: none;
}

/* أزرار الأنماط المختلفة */
.btn.submit, .btn-success {
  background-color: var(--success-color);
}
.btn.submit:hover, .btn-success:hover {
  background-color: #218838;
}

.btn.signout, .btn-danger {
  background-color: var(--danger-color);
}
.btn.signout:hover, .btn.danger:hover {
  background-color: #c82333;
}

.btn-info {
  background-color: var(--info-color);
}
.btn-info:hover {
  background-color: #138496;
}

.btn-warning {
  background-color: var(--warning-color);
  color: var(--text-dark);
}
.btn.warning:hover {
  background-color: #e0a800;
}

/* زر Google (مثال: في صفحة الدخول) */
.btn.google-btn {
  background-color: var(--surface-light);
  color: var(--text-dark);
  border: 1px solid var(--border-color);
}
.btn.google-btn img {
  vertical-align: middle;
  width: 22px;
  margin-left: 8px;
}
.btn.google-btn:hover {
  background-color: #f0f0f0;
}

/* الرؤوس المشتركة (Header / App Bar) */
header, .app-bar {
  background-color: var(--primary-color);
  color: var(--surface-light);
  padding: 15px 25px;
  font-size: 1.5rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 5px var(--shadow-medium);
  z-index: 200;
  flex-shrink: 0;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 64px;
  transition: all 0.3s ease-in-out;
}
/* نمط الرأس عند التمرير (للسكربت) */
.app-bar.scrolled {
  height: 50px;
  padding-top: 10px;
  padding-bottom: 10px;
  font-size: 1.2rem;
  box-shadow: 0 4px 8px var(--shadow-strong);
}
.app-bar.scrolled .app-bar-logo {
  height: 30px;
}
.app-bar.scrolled .app-bar-title {
  font-size: 1rem;
}
.app-bar.scrolled .nav-link {
  height: 50px;
}
.app-bar.scrolled .notification-bell {
  font-size: 1.3rem;
}
.app-bar.scrolled .btn {
  padding: 5px 12px;
  font-size: 0.8rem;
}


.app-bar-logo {
  height: 40px;
  margin-right: 16px;
  transition: height 0.3s ease-in-out;
}

.app-bar-title {
  font-size: 1.25rem;
  font-weight: 700;
  margin-left: 16px;
  white-space: nowrap;
  transition: font-size 0.3s ease-in-out;
}

.app-bar-spacer {
  flex-grow: 1;
}

/* Navigation Links Container */
nav#main-nav-links {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-right: 20px;
    flex-wrap: wrap;
    flex-shrink: 0;
}


/* Navigation Links (لصفحات المعلم) */
.nav-link {
  color: var(--surface-light);
  text-decoration: none;
  padding: 0 16px;
  height: 64px;
  display: inline-flex;
  align-items: center;
  position: relative;
  transition: all 0.3s ease;
  font-weight: 500;
}

.nav-link:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.nav-link.active {
  background-color: rgba(255, 255, 255, 0.15);
}

.nav-link.active::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 16px;
  right: 16px;
  height: 2px;
  background-color: var(--secondary-light);
}


/* الحاويات الرئيسية */
.container {
  max-width: 1200px;
  margin: 24px auto;
  padding: 28px;
  background: var(--surface-light);
  border-radius: 12px;
  box-shadow: 0 2px 10px var(--shadow-light);
  flex-grow: 1;
}

/* لجعل العناصر الأولى داخل الـ container تبتعد عن الرأس (إذا لم يكن هناك عنصر أعلى) */
.container > *:first-child {
    margin-top: 24px;
}

/* ------------------------------------ */
/* 4. أنماط البطاقات والجداول والنماذج والإشعارات (المكونات الأساسية) */
/* ------------------------------------ */

/* البطاقات (Cards) - توحيد المظهر */
.card {
  background-color: var(--surface-light);
  border-radius: 12px;
  box-shadow: 0 4px 8px var(--shadow-light);
  margin-bottom: 24px;
  overflow: hidden;
  transition: all 0.2s ease-in-out;
  border: 1px solid var(--border-color);
}

.card:hover {
  box-shadow: 0 6px 12px var(--shadow-medium);
  transform: translateY(-2px);
}

.card-header {
  padding: 16px 20px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: var(--background-light);
  color: var(--primary-dark);
  border-top-left-radius: 12px;
  border-top-right-radius: 12px;
  font-weight: 600;
}

.card-content {
  padding: 20px;
}

.card-actions {
  padding: 12px 20px;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  border-top: 1px solid var(--border-color);
  background-color: var(--background-light);
  border-bottom-left-radius: 12px;
  border-bottom-right-radius: 12px;
}

/* الجداول (Tables) - مظهر احترافي وموحد */
.table-container {
  width: 100%;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  margin: 20px 0;
  border-radius: 12px;
  box-shadow: 0 2px 8px var(--shadow-light);
  background-color: var(--surface-light);
  border: 1px solid var(--border-color);
}

.table {
  width: 100%;
  border-collapse: collapse;
  min-width: 700px;
}

.table th {
  background-color: var(--primary-color);
  color: var(--surface-light);
  font-weight: 600;
  text-align: right;
  padding: 14px 20px;
  position: sticky;
  top: 0;
  white-space: nowrap;
  border-bottom: 1px solid var(--border-color);
}

.table td {
  padding: 12px 20px;
  border-bottom: 1px solid var(--border-color);
  text-align: right;
  vertical-align: middle;
}

.table tr:last-child td {
  border-bottom: none;
}

.table tbody tr:hover {
  background-color: rgba(0, 0, 0, 0.03);
}

/* أنماط خاصة لخلايا الجدول */
.summary-text-cell {
  white-space: normal;
  word-break: break-word;
  max-width: 300px;
  text-align: right;
}

.table-mark-input {
  width: 80px;
  padding: 8px 10px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  font-size: 0.95rem;
  text-align: center;
  margin-left: 8px;
  background-color: var(--background-light);
  color: var(--text-dark);
}

.table-mark-button {
  padding: 8px 16px;
  font-size: 0.9rem;
  background-color: var(--secondary-color);
  color: var(--surface-light);
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
    }
    .table-mark-button:hover {
        background-color: var(--secondary-dark);
    }


    /* النماذج (Forms) - مظهر موحد */
    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      margin-bottom: 8px;
      color: var(--text-dark);
      font-size: 0.95rem;
      font-weight: 500;
    }

    .form-control {
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      font-size: 1rem;
      background-color: var(--surface-light);
      color: var(--text-dark);
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
      box-sizing: border-box;
    }

    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(66, 103, 178, 0.2);
      outline: none;
    }

    .form-select {
      appearance: none;
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23000000'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: left 12px center;
      background-size: 24px;
      padding-left: 40px;
      padding-right: 12px;
    }
    .dark-mode .form-select {
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23e0e0e0'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    }

    textarea.form-control {
      min-height: 100px;
      resize: vertical;
    }

    /* شارات الحالة (Status Badges) */
    .summary-status {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      font-weight: bold;
      display: inline-block;
      white-space: nowrap;
      text-transform: capitalize;
      border: 1px solid;
    }
    .summary-status.submitted {
      background-color: #e3f6ed;
      color: #219e4b;
      border-color: #b7eecd;
    }
    .summary-status.draft {
      background-color: #fff4e0;
      color: #b96d0d;
      border-color: #ffda8d;
    }

    /* صندوق الإشعارات (Notification Panel) - مظهر موحد */
    .notification-bell {
      position: relative;
      font-size: 1.6rem;
      cursor: pointer;
      color: var(--surface-light);
      transition: color 0.2s ease, transform 0.2s ease;
    }

    .notification-bell:hover {
      transform: scale(1.1);
      color: var(--secondary-light);
    }

    .notification-badge {
      position: absolute;
      top: -8px;
      right: -8px;
      background-color: var(--danger-color);
      color: var(--surface-light);
      border-radius: 50%;
      padding: 3px 8px;
      font-size: 0.7rem;
      font-weight: bold;
      line-height: 1;
      min-width: 15px;
      text-align: center;
      box-shadow: 0 0 5px var(--shadow-medium);
      border: 1px solid var(--surface-light);
    }

    .notification-panel {
      display: none;
      position: fixed;
      top: 70px;
      right: 15px;
      width: 350px;
      max-height: 450px;
      overflow-y: auto;
      background-color: var(--surface);
      border-radius: 12px;
      box-shadow: var(--elevation-8);
      z-index: 1100;
      padding: 15px;
      text-align: right;
      border: 1px solid var(--border-color);
      box-sizing: border-box;
      animation: fadeInDown 0.3s ease-out;
    }

    @keyframes fadeInDown {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .notification-panel h5 {
      margin-top: 0;
      margin-bottom: 15px;
      color: var(--primary-dark);
      font-size: 1.125rem;
      border-bottom: 1px solid var(--divider);
      padding-bottom: 10px;
      font-weight: 700;
    }

    .notification-item {
      padding: 14px 20px;
      border-bottom: 1px solid var(--divider);
      font-size: 0.95rem;
    }

    .notification-item.unread {
      background-color: rgba(98, 0, 238, 0.08); /* More noticeable unread background */
    }

    .notification-item:last-child {
      border-bottom: none;
    }

    .notification-timestamp {
      font-size: 0.8rem;
      color: var(--text-secondary);
      margin-top: 6px;
      text-align: right;
      display: block;
    }
    .notification-item .mark-read-btn {
        background-color: var(--secondary-color);
        color: var(--on-secondary);
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        font-size: 0.85rem;
        cursor: pointer;
        margin-top: 10px;
        display: inline-block;
        transition: background-color 0.2s ease;
    }
    .notification-item .mark-read-btn:hover {
        background-color: var(--secondary-dark);
    }


    /* Toast */
    .toast {
      position: fixed;
      bottom: 24px;
      right: 24px;
      padding: 14px 28px; /* Increased padding */
      background-color: #323232;
      color: white;
      border-radius: 8px; /* Consistent border radius */
      box-shadow: var(--elevation-6);
      z-index: 1200;
      opacity: 0;
      transform: translateY(100px);
      transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55); /* More engaging animation */
      font-size: 1rem; /* Larger font */
    }

    .toast.show {
      opacity: 1;
      transform: translateY(0);
    }

    /* Spinner */
    .spinner {
      display: none;
      width: 50px; /* Larger spinner */
      height: 50px; /* Larger spinner */
      margin: 30px auto; /* More margin */
      border: 5px solid rgba(0, 0, 0, 0.1); /* Thicker border */
      border-radius: 50%;
      border-top-color: var(--primary-color);
      animation: spin 0.8s ease-in-out infinite; /* Slightly faster animation */
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    /* Utility Classes */
    .text-center { text-align: center; }
    .text-right { text-align: right; }
    .text-left { text-align: left; }
    .mt-1 { margin-top: 8px; } /* Increased base margin units */
    .mt-2 { margin-top: 12px; }
    .mt-3 { margin-top: 20px; }
    .mt-4 { margin-top: 28px; }
    .mt-5 { margin-top: 36px; }
    .mb-1 { margin-bottom: 8px; }
    .mb-2 { margin-bottom: 12px; }
    .mb-3 { margin-bottom: 20px; }
    .mb-4 { margin-bottom: 28px; }
    .mb-5 { margin-bottom: 36px; }
    .d-none { display: none; }
    .d-flex { display: flex; }
    .align-items-center { align-items: center; }
    .justify-content-between { justify-content: space-between; }
    .ml-2 { margin-right: 12px; margin-left: 0; } /* For RTL, this means space to the right of the element */
    .mr-1 { margin-left: 8px; margin-right: 0; } /* Adjusted for RTL icon spacing */


    /* Responsive Adjustments */
    @media (max-width: 960px) {
      body {
        padding-top: 56px;
      }
      
      .app-bar {
        height: 56px;
      }
      
      .nav-link {
        height: 56px;
        padding: 0 12px;
        font-size: 0.875rem;
      }
      
      .notification-panel {
        top: 56px;
        width: 320px;
        /* Re-center for smaller screens if needed, otherwise keep right-aligned */
        /* right: 50%;
        transform: translateX(50%); */
      }
      .notification-bell {
        width: 40px;
        height: 40px;
        font-size: 24px;
      }
      .notification-badge {
        width: 16px;
        height: 16px;
        font-size: 0.65rem;
        top: 2px;
        right: 2px;
      }
      h1 { font-size: 1.8rem; }
      h2 { font-size: 1.3rem; }
      h3 { font-size: 1.1rem; }
    }

    @media (max-width: 600px) {
      .app-bar-title {
        display: none;
      }
      
      .levels-grid {
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
      }
      
      .card-content {
        padding: 16px; /* Slightly reduced for small screens */
      }
      
      .table th,
      .table td {
        padding: 10px 14px; /* Reduced padding */
      }
      
      .notification-panel {
        width: calc(100% - 32px);
        right: 16px;
        left: 16px;
        /* No transform needed if using fixed left/right */
      }
      .table-mark-input {
        width: 60px;
        font-size: 0.85rem;
        padding: 6px 8px;
      }
      .table-mark-button {
        font-size: 0.75rem;
        padding: 6px 12px;
      }
    }

    /* Dark Mode Overrides */
    .dark-mode .app-bar { background-color: #1a1a1a; } /* Deeper dark background */
    .dark-mode .card { background-color: var(--surface); }
    .dark-mode .card:hover { box-shadow: var(--elevation-4); }
    .dark-mode .card-header { 
      border-bottom-color: var(--divider); 
      background-color: #242424; /* Slightly darker header for contrast */
      color: var(--on-surface);
    }
    .dark-mode .card-actions {
      background-color: #242424; /* Consistent with header */
    }
    .dark-mode .form-label { color: var(--text-secondary); }
    .dark-mode .form-control {
      background-color: #1e1e1e; /* Darker input background */
      border-color: var(--divider);
      color: var(--text-primary);
    }
    
    .dark-mode .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 2px rgba(187, 134, 252, 0.2); /* Light primary color tint for focus */
    }
    
    .dark-mode .form-select {
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23ffffff'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    }
    
    .dark-mode .table th { background-color: var(--primary-dark); }
    .dark-mode .table td { border-bottom-color: var(--divider); }
    .dark-mode .table tr:hover { background-color: rgba(255, 255, 255, 0.08); } /* More noticeable hover in dark mode */
    
    .dark-mode .level-item { border-color: var(--divider); }
    .dark-mode .level-item:hover { box-shadow: var(--elevation-2); }

    .dark-mode .level-color-1 { background-color: rgba(187, 134, 252, 0.08); }
    .dark-mode .level-color-2 { background-color: rgba(3, 218, 198, 0.08); }
    .dark-mode .level-color-3 { background-color: rgba(255, 179, 0, 0.08); }
    .dark-mode .level-color-4 { background-color: rgba(255, 0, 0, 0.08); }
    .dark-mode .level-color-5 { background-color: rgba(0, 150, 136, 0.08); }
    .dark-mode .level-color-6 { background-color: rgba(233, 30, 99, 0.08); }
    .dark-mode .level-color-7 { background-color: rgba(121, 85, 72, 0.08); }
    
    .dark-mode .notification-panel { background-color: var(--surface); }
    .dark-mode .notification-header { border-bottom-color: var(--divider); }
    .dark-mode .notification-item { border-bottom-color: var(--divider); }
    .dark-mode .notification-item.unread { background-color: rgba(187, 134, 252, 0.12); } /* Darker unread for contrast */
    .dark-mode .notification-timestamp { color: var(--text-secondary); }

    .dark-mode .toast { background-color: #424242; }
    .dark-mode .spinner { border-top-color: var(--primary-color); }

    /* PDF download styling adjustments for better print */
    @media print {
        body {
            font-family: 'Tajawal', sans-serif !important;
            color: black !important;
            background-color: white !important;
        }
        .app-bar, .app-bar-spacer, .nav-link, .btn, .toast, .spinner, .d-none, .table-mark-input, .table-mark-button, .reset-summary, .notification-bell, .notification-panel {
            display: none !important;
        }
        .card {
            box-shadow: none !important;
            border: 1px solid #ccc !important;
            margin-bottom: 16px !important;
            border-radius: 0 !important;
        }
        .card-header, .card-actions {
            background-color: #f0f0f0 !important;
            border-bottom: 1px solid #ccc !important;
            color: black !important;
            padding: 10px 15px !important;
            border-radius: 0 !important;
        }
        .card-content {
            padding: 15px !important;
        }
        .table {
            min-width: unset !important;
            width: 100% !important;
            border-collapse: collapse !important;
        }
        .table th, .table td {
            border: 1px solid #ddd !important;
            padding: 8px 10px !important;
            background-color: white !important;
            color: black !important;
            white-space: normal !important;
            word-break: break-word !important;
        }
        .table th {
            background-color: #eee !important;
            font-weight: bold !important;
        }
        .form-group {
            margin-bottom: 10px !important;
        }
        .form-control {
            border: 1px solid #ccc !important;
            padding: 8px !important;
            border-radius: 0 !important;
            background-color: white !important;
            color: black !important;
        }
        .levels-grid {
            display: block !important;
            gap: 0 !important;
        }
        .level-item {
            border: 1px solid #ccc !important;
            margin-bottom: 5px !important;
            padding: 8px !important;
            background-color: #f9f9f9 !important;
            border-radius: 0 !important;
        }
        .level-item input[type="checkbox"] {
            display: inline-block !important;
            margin-right: 5px !important;
            width: auto !important;
            height: auto !important;
        }
        .summary-status {
            padding: 3px 8px !important;
            border-radius: 5px !important;
            font-size: 0.75rem !important;
        }
        .summary-status.submitted {
            background-color: #d4edda !important;
            color: #155724 !important;
        }
        .summary-status.draft {
            background-color: #ffeeba !important;
            color: #856404 !important;
        }
        #summaryDetailsContent, #summaryDetailsStudentReply {
            border: 1px solid #ccc !important;
            padding: 8px !important;
            background-color: #fefefe !important;
        }
    }
  </style>
</head>
<body>
  <header class="app-bar">
    <img src="https://i.ibb.co/cSpS2NDk/logo-1.png" alt="شعار المركز" class="app-bar-logo">
    <h1 class="app-bar-title">لوحة المعلم - إدارة الطلاب والدروس</h1>
    <div class="app-bar-spacer"></div>
    <nav>
      <a href="dashboard.html" class="nav-link active">لوحة التحكم</a>
      <a href="questions-admin.html" class="nav-link">إدارة الأسئلة</a>
    </nav>
    <div class="d-flex align-items-center">
      <button class="btn ml-2" onclick="toggleDarkMode()">
        <i class="material-icons">brightness_4</i>
      </button>
      <div class="notification-bell" onclick="toggleTeacherNotificationPanel()">
        <i class="material-icons">notifications</i>
        <span id="unreadTeacherNotificationsBadge" class="notification-badge d-none">0</span>
      </div>
      <button class="btn btn-danger ml-2" onclick="logout()">
        <i class="material-icons mr-1">logout</i> تسجيل الخروج
      </button>
    </div>
  </header>

  <div id="teacherNotificationPanel" class="notification-panel">
    <div class="notification-header">
      <h5 class="mb-0">إشعارات الطلاب</h5>
    </div>
    <div id="teacherNotificationsList">
      <p class="text-center" style="color: var(--text-secondary); padding: 16px;">لا توجد إشعارات حالياً.</p>
    </div>
  </div>

  <main class="container" style="max-width: 1200px; margin: 24px auto; padding: 0 20px;"> <div class="spinner" id="loadingSpinner"></div>
    <div id="toast" class="toast"></div>

    <div class="card">
      <div class="card-header">
        <h4 class="mb-0">ضبط عدد الأسئلة في الامتحان لكل مستوى</h4>
      </div>
      <div class="card-content">
        <form id="settingsForm" onsubmit="return false;">
          <div class="table-container">
            <table class="table settings-table">
              <thead>
                <tr>
                  <th>المستوى</th>
                  <th>عدد الأسئلة</th>
                  <th>عدد العلامات</th>
                  <th>الوقت (دقيقة)</th>
                  <th>إجراء</th>
                </tr>
              </thead>
              <tbody id="settingsTbody">
                <tr><td colspan="5" class="text-center" style="color:var(--text-secondary)">جاري التحميل...</td></tr>
              </tbody>
            </table>
          </div>
        </form>
      </div>
    </div>
    <div class="card mt-3">
      <div class="card-header">
        <h4 id="formTitle" class="mb-0">إضافة سؤال جديد</h4>
      </div>
      <div class="card-content">
        <form id="questionForm">
          <div class="form-group">
            <label for="qText" class="form-label">نص السؤال:</label>
            <textarea id="qText" class="form-control" required></textarea>
          </div>
          <div class="form-group">
            <label for="qLevel" class="form-label">المستوى:</label>
            <select id="qLevel" class="form-control form-select">
              <option value="1">المستوى 1</option>
              <option value="2">المستوى 2</option>
              <option value="3">المستوى 3</option>
              <option value="4">المستوى 4</option>
              <option value="5">المستوى 5</option>
              <option value="6">المستوى 6</option>
              <option value="7">المستوى 7</option>
            </select>
          </div>
          <div class="form-group">
            <label for="qMark" class="form-label">علامة السؤال:</label>
            <input type="number" id="qMark" class="form-control" min="1" value="1" required style="max-width:120px;">
          </div>
          <div class="form-group">
            <label class="form-label">الخيارات:</label>
            <div class="choices-area" id="choicesArea"></div>
            <button type="button" class="btn btn-outlined mt-2" onclick="addChoice()">
                <i class="material-icons mr-1">add</i> خيار جديد
            </button>
          </div>
          <div class="card-actions">
            <button type="submit" class="btn btn-success">
                <i class="material-icons mr-1">save</i> حفظ السؤال
            </button>
            <button type="button" class="btn btn-outlined ml-2" onclick="resetForm()">
                <i class="material-icons mr-1">cancel</i> إلغاء
            </button>
          </div>
          <div class="mt-2 text-center" id="formMsg" style="color: var(--error);"></div>
          <input type="hidden" id="editId">
        </form>
      </div>
    </div>

    <div class="card mt-3">
        <div class="card-header d-flex align-items-center justify-content-between">
            <h4 class="mb-0">قائمة الأسئلة</h4>
            <div class="d-flex align-items-center">
                <label for="filterLevel" class="form-label mb-0" style="margin-left: 10px;">تصفية حسب المستوى:</label>
                <select id="filterLevel" class="form-control form-select" onchange="renderQuestionsTable()" style="width: auto; display: inline-block;">
                    <option value="">الكل</option>
                    <option value="1">المستوى 1</option>
                    <option value="2">المستوى 2</option>
                    <option value="3">المستوى 3</option>
                    <option value="4">المستوى 4</option>
                    <option value="5">المستوى 5</option>
                    <option value="6">المستوى 6</option>
                    <option value="7">المستوى 7</option>
                </select>
            </div>
        </div>
        <div class="card-content">
            <div class="table-container">
                <table class="table" id="questionsTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>السؤال</th>
                            <th>المستوى</th>
                            <th>العلامة</th>
                            <th>الخيارات</th>
                            <th>عدد الصحيحة</th>
                            <th>تعديل</th>
                            <th>حذف</th>
                        </tr>
                    </thead>
                    <tbody id="questionsTbody"></tbody>
                </table>
            </div>
        </div>
    </div>
  </main>

<script>
// Toast & Loading Functions
function showToast(msg, color="var(--primary-color)") {
  const toast = document.getElementById("toast");
  if (!toast) {
      console.error("Toast element not found!");
      return;
  }
  toast.innerText = msg;
  toast.style.background = color;
  toast.className = "toast show";
  setTimeout(()=>{ toast.className = toast.className.replace("show", ""); }, 2500);
}
function showLoading(show) {
  const spinner = document.getElementById("loadingSpinner");
  if (spinner) {
      spinner.style.display = show ? "block" : "none";
  }
}

// Dark Mode Toggle
function toggleDarkMode() {
  document.body.classList.toggle('dark-mode');
  // Save user preference
  if (document.body.classList.contains('dark-mode')) {
    localStorage.setItem('theme', 'dark');
  } else {
    localStorage.setItem('theme', 'light');
  }
}
// Apply saved theme preference on load
document.addEventListener('DOMContentLoaded', () => {
  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-mode');
  }
});


if (!firebase.apps.length) { firebase.initializeApp(firebaseConfig); }
var auth = firebase.auth();
var firestore = firebase.firestore();

let questions = [];
const LEVELS = [1,2,3,4,5,6,7];

// حماية الصفحة - فقط للمعلمين
auth.onAuthStateChanged(function(user) {
  if (user) {
    firestore.collection('users').doc(user.uid).get().then(function(doc) {
      if (!doc.exists || doc.data().role !== "teacher") {
        window.location.href = "login.html";
      } else {
        startQuestionsAdmin();
        loadSettingsTable();
      }
    }).catch(function(error) {
      window.location.href = "login.html";
    });
  } else {
    window.location.href = "login.html";
  }
});

function logout() {
  auth.signOut().then(()=>{window.location.href='login.html';});
}

// إعدادات عدد الأسئلة لكل مستوى
function loadSettingsTable() {
  showLoading(true);
  const tbody = document.getElementById('settingsTbody');
  tbody.innerHTML = '<tr><td colspan="5" class="text-center" style="color:var(--text-secondary)">جاري التحميل...</td></tr>';
  firestore.collection('exam_settings').get().then(snapshot => {
    let data = {};
    snapshot.forEach(doc => {
      data[doc.id] = doc.data(); // Get all data for the level (question_num, total_marks, exam_duration)
    });
    let rows = '';
    LEVELS.forEach(lvl => {
      let questionNum = data[`level_${lvl}`]?.question_num !== undefined ? data[`level_${lvl}`].question_num : '';
      let totalMarks = data[`level_${lvl}`]?.total_marks !== undefined ? data[`level_${lvl}`].total_marks : ''; // New field
      let examDuration = data[`level_${lvl}`]?.exam_duration !== undefined ? data[`level_${lvl}`].exam_duration : ''; // New field

      rows += `
        <tr>
          <td>المستوى ${lvl}</td>
          <td>
            <input type="number" min="1" id="input_qnum_${lvl}" value="${questionNum}" placeholder="عدد الأسئلة" class="form-control" required>
          </td>
          <td>
            <input type="number" min="1" id="input_tmarks_${lvl}" value="${totalMarks}" placeholder="عدد العلامات" class="form-control" required>
          </td>
          <td>
            <input type="number" min="1" id="input_duration_${lvl}" value="${examDuration}" placeholder="الوقت (دقيقة)" class="form-control" required>
          </td>
          <td class="text-center">
            <button type="button" class="btn btn-success" onclick="saveLevel(${lvl})">
                <i class="material-icons">save</i>
            </button>
          </td>
        </tr>
      `;
    });
    tbody.innerHTML = rows;
    showLoading(false);
  }).catch(error => {
      showToast(`خطأ في تحميل الإعدادات: ${error.message}`, 'var(--error)');
      showLoading(false);
  });
}

function saveLevel(lvl) {
  let inputQNum = document.getElementById(`input_qnum_${lvl}`);
  let inputTMarks = document.getElementById(`input_tmarks_${lvl}`);
  let inputDuration = document.getElementById(`input_duration_${lvl}`);

  let qNum = parseInt(inputQNum.value);
  let tMarks = parseInt(inputTMarks.value);
  let duration = parseInt(inputDuration.value);

  if (!qNum || qNum < 1) {
    showToast(`يرجى إدخال عدد صحيح أكبر من صفر لعدد الأسئلة للمستوى ${lvl}`, 'var(--error)');
    inputQNum.focus();
    return;
  }
  if (!tMarks || tMarks < 1) {
    showToast(`يرجى إدخال عدد صحيح أكبر من صفر لعدد العلامات للمستوى ${lvl}`, 'var(--error)');
    inputTMarks.focus();
    return;
  }
  if (!duration || duration < 1) {
    showToast(`يرجى إدخال عدد صحيح أكبر من صفر للوقت المخصص للمستوى ${lvl}`, 'var(--error)');
    inputDuration.focus();
    return;
  }

  firestore.collection('exam_settings').doc(`level_${lvl}`).set({
    question_num: qNum,
    total_marks: tMarks,
    exam_duration: duration
  }).then(()=>{
    showToast(`تم حفظ إعدادات المستوى ${lvl} بنجاح`, 'var(--secondary-color)');
  }).catch((error)=>{
    showToast(`حدث خطأ أثناء الحفظ! ${error.message}`, 'var(--error)');
    console.error("Error saving level settings:", error);
  });
}

// الكود الأصلي لإضافة الأسئلة وإدارتها
function startQuestionsAdmin() {
  resetForm();
  loadQuestions();
}

function addChoice(text = '', checked = false) {
  let idx = document.querySelectorAll('.choice-row').length;
  let div = document.createElement('div');
  div.className = 'choice-row d-flex align-items-center mb-1';
  div.innerHTML = `
    <input type="checkbox" class="correctChoice" name="correct${idx}" ${checked ? 'checked' : ''} title="صحيح" style="width:24px; height:24px; margin-left:8px; accent-color: var(--primary-color);">
    <input type="text" class="choiceText form-control" value="${text}" required placeholder="الخيار ${idx+1}" style="flex-grow:1; margin-bottom:0;">
    <button type="button" class="btn btn-danger ml-2" onclick="this.parentNode.remove()" style="padding: 6px 12px; height: auto;">
        <i class="material-icons">delete</i>
    </button>
  `;
  document.getElementById('choicesArea').appendChild(div);
}

function resetForm() {
  document.getElementById('questionForm').reset();
  document.getElementById('choicesArea').innerHTML = '';
  addChoice();
  addChoice();
  document.getElementById('editId').value = '';
  document.getElementById('formTitle').innerText = 'إضافة سؤال جديد';
  document.getElementById('formMsg').innerText = '';
  document.getElementById('qMark').value = 1;
}

function loadQuestions() {
  showLoading(true);
  firestore.collection('questions').orderBy('level').get().then(snap => {
    questions = snap.docs.map(doc => ({...doc.data(), id: doc.id}));
    renderQuestionsTable();
    showLoading(false);
  }).catch(error => {
      showToast(`خطأ في تحميل الأسئلة: ${error.message}`, 'var(--error)');
      showLoading(false);
  });
}

function renderQuestionsTable() {
  let level = document.getElementById('filterLevel').value;
  let rows = '';
  let filtered = level ? questions.filter(q => q.level == level) : questions;
  filtered.forEach((q, i) => {
    let chs = q.choices.map((c, idx) =>
      `<span class="choice-item${q.correct && q.correct.includes(idx) ? ' correct' : ''}">${c}</span>`
    ).join('');
    rows += `<tr>
      <td class="text-center">${i+1}</td>
      <td class="text-right">${q.question}</td>
      <td class="text-center">${q.level}</td>
      <td class="text-center">${q.mark || 1}</td>
      <td><div class="choices-list d-flex justify-content-end">${chs}</div></td>
      <td class="text-center">${q.correct ? q.correct.length : 0}</td>
      <td class="text-center">
        <button class="btn" onclick="editQuestion('${q.id}')" style="padding: 6px 12px; height: auto;">
            <i class="material-icons" style="font-size:18px;">edit</i>
        </button>
      </td>
      <td class="text-center">
        <button class="btn btn-danger" onclick="deleteQuestion('${q.id}')" style="padding: 6px 12px; height: auto;">
            <i class="material-icons" style="font-size:18px;">delete</i>
        </button>
      </td>
    </tr>`;
  });
  document.getElementById('questionsTbody').innerHTML = rows || `<tr><td colspan="8" class="text-center" style="color:var(--text-secondary)">لا توجد أسئلة</td></tr>`;
}

function editQuestion(id) {
  let q = questions.find(x => x.id === id);
  if (!q) return;
  document.getElementById('qText').value = q.question;
  document.getElementById('qLevel').value = q.level;
  document.getElementById('qMark').value = q.mark || 1;
  document.getElementById('choicesArea').innerHTML = '';
  q.choices.forEach((choice, i) => {
    addChoice(choice, q.correct && q.correct.includes(i));
  });
  document.getElementById('editId').value = id;
  document.getElementById('formTitle').innerText = 'تعديل سؤال';
  window.scrollTo({top:0,behavior:'smooth'});
}

function deleteQuestion(id) {
  if (!confirm('هل أنت متأكد من حذف السؤال؟')) return;
  firestore.collection('questions').doc(id).delete().then(()=>{
      loadQuestions();
      showToast('تم حذف السؤال بنجاح!', 'var(--secondary-color)');
  }).catch(error => {
      showToast(`خطأ في حذف السؤال: ${error.message}`, 'var(--error)');
      console.error("Error deleting question:", error);
  });
}

document.getElementById('questionForm').onsubmit = function(e){
  e.preventDefault();
  let question = document.getElementById('qText').trim();
  let level = parseInt(document.getElementById('qLevel').value);
  let mark = parseFloat(document.getElementById('qMark').value) || 1;
  let choiceNodes = document.querySelectorAll('.choice-row');
  let choices = [];
  let correct = [];
  choiceNodes.forEach((row, i) => {
    let text = row.querySelector('.choiceText').value.trim();
    if (text) {
      choices.push(text);
      if (row.querySelector('.correctChoice').checked) correct.push(i);
    }
  });
  if (choices.length < 2) { showFormMsg('يجب إدخال خيارين على الأقل!'); return; }
  if (correct.length === 0) { showFormMsg('حدد إجابة صحيحة واحدة على الأقل!'); return; }
  if (mark <= 0) { showFormMsg('يجب أن تكون العلامة أكبر من صفر!'); return; }
  let qObj = {
    question,
    choices,
    correct,
    level,
    mark
  };
  let editId = document.getElementById('editId').value;
  if (editId) {
    firestore.collection('questions').doc(editId).set(qObj).then(()=>{
      resetForm();
      loadQuestions();
      showFormMsg('تم تحديث السؤال بنجاح', true);
      showToast('تم تحديث السؤال بنجاح!', 'var(--secondary-color)');
    }).catch(error => {
        showFormMsg(`خطأ في تحديث السؤال: ${error.message}`, false);
        showToast(`خطأ في تحديث السؤال: ${error.message}`, 'var(--error)');
        console.error("Error updating question:", error);
    });
  } else {
    firestore.collection('questions').add(qObj).then(()=>{
      resetForm();
      loadQuestions();
      showFormMsg('تمت إضافة السؤال بنجاح', true);
      showToast('تمت إضافة السؤال بنجاح!', 'var(--secondary-color)');
    }).catch(error => {
        showFormMsg(`خطأ في إضافة السؤال: ${error.message}`, false);
        showToast(`خطأ في إضافة السؤال: ${error.message}`, 'var(--error)');
        console.error("Error adding question:", error);
    });
  }
};

function showFormMsg(msg, success=false) {
  let el = document.getElementById('formMsg');
  el.innerText = msg;
  el.style.color = success ? 'var(--secondary-color)' : 'var(--error)';
  setTimeout(()=>{el.innerText='';}, 2500);
}
</script>
</body>
</html>
